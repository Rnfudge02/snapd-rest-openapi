# .github/workflows/controller-script-tests.yml

name: 'Controller Script CI: Comprehensive Tests'

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'openapi-controller.sh'
      - '.github/workflows/controller-script-tests.yml'
  push:
    branches: [ main ]
    paths:
      - 'openapi-controller.sh'
      - '.github/workflows/controller-script-tests.yml'

jobs:
  run-all-tests:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        test_name:
          - "Help Command"
          - "Invalid Command"
          - "CSV Generation"
          - "Graph (Light Mode)"
          - "Graph (Dark Mode)"
          - "SDK Generation"
          - "Prompt Generation"
          - "Swagger Docs"
          - "Sphinx (Default Dir)"
          - "Sphinx (Custom Dir)"
          - "Validation (Success)"
          - "Validation (Failure)"
          - "Mock Server Smoke Test"

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install System Dependencies for Script
        run: sudo apt-get update && sudo apt-get install -y tree graphviz

      - name: Set up Node.js v22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Make script executable
        run: chmod +x openapi-controller.sh

      - name: Install All Script Dependencies
        run: ./openapi-controller.sh --install

      - name: Run Test Case - ${{ matrix.test_name }}
        run: |
          if [[ "${{ matrix.test_name }}" == "Validation (Failure)" ]]; then
            echo "Creating a deliberately invalid openapi.yaml for the failure test..."
            echo 'openapi: 3.0.0\ninfo: this is not a valid info object' > openapi.yaml
          fi

          case "${{ matrix.test_name }}" in
            "Help Command")
              ./openapi-controller.sh --help | grep "Usage:"
              ;;
            "Invalid Command")
              if ./openapi-controller.sh --this-is-not-a-real-flag; then exit 1; else echo "Correctly failed as expected"; fi
              ;;
            "CSV Generation")
              ./openapi-controller.sh --csv
              test -f endpoint_methods.csv
              ;;
            "Graph (Light Mode)")
              ./openapi-controller.sh --graph
              ls visuals/*.svg >/dev/null 2>&1
              ;;
            "Graph (Dark Mode)")
              ./openapi-controller.sh --graph --dark
              ls visuals/*.svg >/dev/null 2>&1
              ;;
            "SDK Generation")
              ./openapi-controller.sh --generate markdown
              test -d generated-sdks/markdown && test -f generated-sdks/markdown/README.md
              ;;
            "Prompt Generation")
              ./openapi-controller.sh --prompt
              test -d prompts && [ "$(ls -A prompts)" ]
              ;;
            "Swagger Docs")
              ./openapi-controller.sh --swagger
              test -f docs/swagger/index.html
              ;;
            "Sphinx (Default Dir)")
              ./openapi-controller.sh --sphinx
              test -f docs/_static/api/index.html
              ;;
            "Sphinx (Custom Dir)")
              ./openapi-controller.sh --sphinx custom-docs-dir
              test -f custom-docs-dir/index.html
              ;;
            "Validation (Success)")
              ./openapi-controller.sh --validate
              ;;
            "Validation (Failure)")
              if ./openapi-controller.sh --validate; then
                echo "Error: Validation unexpectedly passed on an invalid file."
                exit 1
              else
                echo "Correctly failed as expected on the invalid file."
              fi
              ;;
            "Mock Server Smoke Test")
              echo "Starting mock server for 10s..."
              timeout 10s ./openapi-controller.sh --mock-server || [ $? -eq 124 ]
              ;;
          esac