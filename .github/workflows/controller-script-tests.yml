# .github/workflows/controller-script-tests.yml

name: 'Controller Script CI: Comprehensive Tests'

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'openapi-controller.sh'
      - '.github/workflows/controller-script-tests.yml'
  push:
    branches: [ main ]
    paths:
      - 'openapi-controller.sh'
      - '.github/workflows/controller-script-tests.yml'

jobs:
  run-all-tests:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        test_name:
          - "Help Command"
          - "Invalid Command"
          - "CSV Generation"
          - "Graph (Light Mode)"
          - "Graph (Dark Mode)"
          - "SDK Generation"
          - "Prompt Generation"
          - "Swagger Docs"
          - "Sphinx (Default Dir)"
          - "Sphinx (Custom Dir)"
          - "Validation (Success)"
          - "Validation (Failure)"
          - "Mock Server Smoke Test"

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Create Dummy Test Files
        run: |
          echo 'openapi: 3.0.0
          info:
            title: Test API
            version: 1.0.0
          paths:
            /test:
              get:
                summary: A test endpoint
                responses:
                  "200":
                    description: OK' > openapi.yaml
          mkdir -p scripts visuals
          echo "with open('report.csv', 'w') as f: f.write('path,method\n')" > scripts/report_generator.py
          echo "import sys; import os; os.makedirs('visuals', exist_ok=True); theme = '-dark' if '--dark' in sys.argv else ''; dot_file = f'visuals/graph{theme}.dot'; with open(dot_file, 'w') as f: f.write('digraph G {}')" > scripts/graph_generator.py

      - name: Make script executable
        run: chmod +x openapi-controller.sh

      - name: Install All Script Dependencies
        id: install
        run: ./openapi-controller.sh --install

      - name: Export Node.js paths
        id: export-path
        run: |
          # Activate nvm to make npm command available
          source "$HOME/.nvm/nvm.sh"
          # Get the root directory where npm installs global packages
          NODE_PREFIX=$(npm prefix -g)
          # Add the 'bin' subdirectory of that path to the GITHUB_PATH
          echo "${NODE_PREFIX}/bin" >> $GITHUB_PATH

      - name: Run Test Case - ${{ matrix.test_name }}
        run: |
          # No 'source' command is needed here anymore because the step above fixed the PATH.
          case "${{ matrix.test_name }}" in
            "Help Command")
              ./openapi-controller.sh --help | grep "Usage:"
              ;;
            "Invalid Command")
              if ./openapi-controller.sh --this-is-not-a-real-flag; then exit 1; else echo "Correctly failed as expected"; fi
              ;;
            "CSV Generation")
              ./openapi-controller.sh --csv
              test -f report.csv
              ;;
            "Graph (Light Mode)")
              ./openapi-controller.sh --graph
              test -f visuals/graph.svg
              ;;
            "Graph (Dark Mode)")
              ./openapi-controller.sh --graph --dark
              test -f visuals/graph-dark.svg
              ;;
            "SDK Generation")
              ./openapi-controller.sh --generate markdown
              test -d generated-sdks/markdown && test -f generated-sdks/markdown/README.md
              ;;
            "Prompt Generation")
              ./openapi-controller.sh --prompt
              test -d prompts && [ "$(ls -A prompts)" ]
              ;;
            "Swagger Docs")
              ./openapi-controller.sh --swagger
              test -f docs/swagger/index.html
              ;;
            "Sphinx (Default Dir)")
              ./openapi-controller.sh --sphinx
              test -f docs/_static/api/index.html
              ;;
            "Sphinx (Custom Dir)")
              ./openapi-controller.sh --sphinx custom-docs-dir
              test -f custom-docs-dir/index.html
              ;;
            "Validation (Success)")
              ./openapi-controller.sh --validate
              ;;
            "Validation (Failure)")
              echo 'openapi: 3.0.0\ninfo: BAD YAML' > openapi.yaml
              if ./openapi-controller.sh --validate; then exit 1; else echo "Correctly failed as expected"; fi
              ;;
            "Mock Server Smoke Test")
              echo "Starting mock server for 10s..."
              timeout 10s ./openapi-controller.sh --mock-server || [ $? -eq 124 ]
              ;;
          esac